import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '7437496034:AAFZvqBaeZd0ft--o6ea4Wns-LwLe9rRxJU'
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –í–∫—É—Å—ã –∏ —Ü–µ–Ω—ã
flavors = {
    "PODONKI –ê–ù–ê–†–•–ò–Ø üßä–¢–∞—Ä—Ö—É–Ω –ª–∏–º–æ–Ω–∞–¥üçã": 15,
    "PODONKI –ê–ù–ê–†–•–ò–Ø üçã–õ–∏–º–æ–Ω–Ω—ã–π –º–∞—Ä–º–µ–ª–∞–¥üçÆ": 15,
    "HOTSPOTüçá–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç –º–∞–ª–∏–Ω–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥üçá": 15,
    "HOTSPOTüç¶–ô–æ–≥—É—Ä—Ç —á–µ—Ä–Ω–∏–∫–∞ –±–∞–Ω–∞–Ωüçå": 15,
    "–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏ üçá –ö–ª—é–∫–≤–∞ –ª–∞–π–ºüçã‚Äçüü©": 15,
    "–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏ üçì–ö–ª—É–±–Ω–∏–∫–∞ –±–∞–Ω–∞–Ωüçå": 15,
    "–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏ üíñ–ö–ª—é–∫–≤–∞ –∑–µ–º–ª—è–Ω–∏–∫–∞üíù": 15,
    "–ê–Ω–∞—Ä—Ö–∏—è V2 ü•≠–ú–∞–Ω–≥–æ –ø–∏–Ω–∞–∫–∞–ª–∞–¥–∞üçπ": 17,
    "–ê–Ω–∞—Ä—Ö–∏—è V2 üçí–í–∏—à–Ω—è –ª–∞–π—Çüçí": 17,
    "CATSWILL ü´ê–ß–µ—Ä–Ω–∏–∫–∞ –µ–∂–µ–≤–∏–∫–∞üçì": 17,
    "CATSWILL üçì–ö–ª—É–±–Ω–∏–∫–∞ –∂–≤–∞—á–∫–∞ –±–∞–Ω–∞–Ωüçå": 17,
    "CATSWILL üçã–õ–∏–º–æ–Ω–∞–¥ —á–µ—Ä–Ω–∏–∫–∞ –ª–∞–π–ºüçã‚Äçüü©": 17,
}

# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
manager_ids = [958394597, 6593155809]

# –ö–æ—Ä–∑–∏–Ω–∞ –∏ —Å—Ç–∞—Ç—É—Å—ã
user_cart = {}
user_order_status = {}

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–æ–≤
def get_flavor_keyboard():
    keyboard = []
    for i, flavor in enumerate(flavors.keys()):
        keyboard.append([InlineKeyboardButton(text=f"{flavor} ‚ûï", callback_data=f"add_{i}")])
    keyboard.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm")])
    keyboard.append([InlineKeyboardButton(text="üõí –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="clear")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ª–∏—á–∏–µ", callback_data="show_stock")],
            [InlineKeyboardButton(text="üì© –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")]
        ]
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Çüëã! –≠—Ç–æ <b>PAR ZAVODüí®</b> ‚Äî –≤—ã–±–µ—Ä–∏ –≤–∫—É—Å –∏ –æ—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑‚≠êÔ∏è\n\n–ê —Ç–∞–∫–∂–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –¢–ì–ö ‚Äî —Ç—É—Ç –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ —Å–∫–∏–¥–∫–∏‚úÖ ‚Äî https://t.me/par_zavod",
        reply_markup=keyboard
    )

# –ù–∞–ª–∏—á–∏–µ
@dp.callback_query(F.data == "show_stock")
async def show_stock(callback: CallbackQuery):
    text = "<b>–°–µ–π—á–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n"
    for name, price in flavors.items():
        text += f"‚Ä¢ {name} ‚Äî <b>{price} BYN‚ú®</b>\n"
    await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üì© –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")]]
    ))
    await callback.answer()

# –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑
@dp.callback_query(F.data == "start_order")
async def start_order(callback: CallbackQuery):
    user_cart[callback.from_user.id] = {}
    await callback.message.delete()
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏ –≤–∫—É—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=get_flavor_keyboard())
    await callback.answer()

# –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å
@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[1])
    flavor = list(flavors.keys())[index]
    user_cart.setdefault(user_id, {})
    user_cart[user_id][flavor] = user_cart[user_id].get(flavor, 0) + 1
    await callback.answer(f"{flavor} ‚Äî {user_cart[user_id][flavor]} —à—Ç.")

# –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data == "clear")
async def clear_cart(callback: CallbackQuery):
    user_cart[callback.from_user.id] = {}
    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query(F.data == "view_cart")
async def view_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart = user_cart.get(user_id, {})
    if not cart:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    text = "<b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n"
    total = 0
    for name, qty in cart.items():
        price = flavors[name]
        total += price * qty
        text += f"‚Ä¢ {name} ‚Äî {qty} √ó {price} BYN = {qty * price} BYN‚ú®\n"

    total_count = sum(cart.values())
    discount = 0
    if total_count >= 10:
        discount = 10
    elif total_count >= 5:
        discount = 5

    if discount:
        text += f"\nüéÅ –°–∫–∏–¥–∫–∞: -{discount} BYN‚ú®"
        total -= discount

    text += f"\n\n<b>–ò—Ç–æ–≥–æ: {total} BYN‚ú®</b>"

    await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm")]]
    ))
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
@dp.callback_query(F.data == "confirm")
async def confirm_order(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart = user_cart.get(user_id, {})
    if not cart:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å—ã.")
        return

    user_order_status[user_id] = {"cart": cart}

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞:2BYN+–û–¢–ó–´–í‚ú®", callback_data="delivery")],
            [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑:‚ìÇÔ∏è–ú–ï–¢–†–û –ü–ê–†–¢–ò–ó–ê–ù–°–ö–ê–Ø‚ìÇÔ∏è", callback_data="pickup")]
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)
    await callback.answer()

# –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query(F.data.in_(["delivery", "pickup"]))
async def choose_delivery(callback: CallbackQuery):
    user_id = callback.from_user.id
    method = callback.data
    user_order_status[user_id]["method"] = method

    if method == "delivery":
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    else:
        cart = user_order_status[user_id]["cart"]
        await finalize_order(user_id, "–°–∞–º–æ–≤—ã–≤–æ–∑: –º–µ—Ç—Ä–æ –ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∞—è")

    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
@dp.message(F.text)
async def get_address(message: Message):
    user_id = message.from_user.id
    if user_id not in user_order_status or "method" not in user_order_status[user_id]:
        return

    if user_order_status[user_id]["method"] == "delivery":
        address = message.text
        await finalize_order(user_id, address)

# –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑
async def finalize_order(user_id, address_info):
    cart = user_cart.get(user_id, {})
    total = 0
    text = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{(await bot.get_chat(user_id)).username or user_id}:\n\n"
    for name, qty in cart.items():
        price = flavors[name]
        subtotal = price * qty
        total += subtotal
        text += f"‚Ä¢ {name} ‚Äî {qty} √ó {price} BYN = {subtotal} BYN‚ú®\n"

    total_count = sum(cart.values())
    discount = 0
    if total_count >= 10:
        discount = 10
    elif total_count >= 5:
        discount = 5

    if user_order_status[user_id]["method"] == "delivery":
        total += 2
        text += "\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: +2 BYN+–û–¢–ó–´–í‚ú®"

    if discount:
        total -= discount
        text += f"\nüéÅ –°–∫–∏–¥–∫–∞: -{discount} BYN‚ú®"

    text += f"\n\n<b>–ò—Ç–æ–≥–æ: {total} BYN‚ú®</b>\n<b>–ü–æ–ª—É—á–µ–Ω–∏–µ:</b> {address_info}"

    for manager_id in manager_ids:
        await bot.send_message(manager_id, text)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="start_order")]
        ]
    )

    await bot.send_message(user_id,
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑‚ÄºÔ∏è\n\n"
        "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç‚ÄºÔ∏è –° –≤–∞–º–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–∂–¥–µ—Ä‚ÄºÔ∏è\n\n"
        "üéÅ –ë–æ–Ω—É—Å—ã –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤‚ÄºÔ∏è\n"
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚ûî https://t.me/par_zavod",
        reply_markup=keyboard
    )

    user_cart[user_id] = {}
    user_order_status[user_id] = {}

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())